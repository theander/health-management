services:
  # frontend:
  #   container_name: frontend
  #   #image: 'andercl/health-management-frontend:1.0.25'
  #   build: ./health-management-frontend
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NEXT_PUBLIC_BASE_URL_USERS_API=http://54.80.8.44:8180#http://172.20.0.1:8180
  #     - NEXT_PUBLIC_BASE_URL_MEDICAL_API=http://54.80.8.44:8280#http://172.20.0.1:8280
  #     - NEXT_PUBLIC_BASE_URL_LABS_API=http://54.80.8.44:8380#http://172.20.0.1:8380
  #     - NEXT_PUBLIC_TESTE=123
  #     - SECRET=secret
  #   depends_on:
  #     - users-api
  #     - medical-api
  #     - labs-api
  #   deploy:
  #       resources:
  #           limits:
  #             cpus: 0.15
  #             memory: 128M
  #           reservations:
  #             cpus: 0.10
  #             memory: 64M
  medical-api:
    container_name: medical-api
    image: 'andercl/health-management-medical-api:1.0.20'
    # build: ./health-management-medical-api
    restart: always
    ports:
      - "8280:8280"
    environment:
      - DATABASE_URL=jdbc:postgresql://172.20.0.1:5440/hm?currentSchema=medical
      - DATABASE_USER=my_user
      - DATABASE_PASSWORD=my_password
      - ENVIRONMENT=production
    depends_on:
      - postgresql
      - users-api
      - labs-api
    networks:
      - backend
    deploy:
        resources:
            limits:
              cpus: 0.15
              memory: 256M
            reservations:
              cpus: 0.10
              memory: 128M
  users-api:
    container_name: users-api
    image: 'andercl/health-management-user-api:1.0.24'
    #build: ./health-management-user-api
    restart: always
    ports:
      - "8180:8180"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=jdbc:postgresql://172.20.0.1:5440/hm?currentSchema=users
      - DATABASE_USER=my_user
      - DATABASE_PASSWORD=my_password
    depends_on:
      - postgresql
      - labs-api
    networks:
      - backend
    deploy:
        resources:
            limits:
              cpus: 0.15
              memory: 256M
            reservations:
              cpus: 0.10
              memory: 128M

  labs-api:
    container_name: labs-api
    image: 'andercl/health-management-labs-api:1.0.24'
    #build: ./health-management-labs-api
    restart: always
    ports:
      - "8380:8380"
    environment:
      - DATABASE_URL=jdbc:postgresql://172.20.0.1:5440/hm?currentSchema=labs
      - DATABASE_USER=my_user
      - DATABASE_PASSWORD=my_password
      - ENVIRONMENT=production
    depends_on:
      - postgresql
    networks:
      - backend
    deploy:
        resources:
            limits:
              cpus: 0.15
              memory: 256M
            reservations:
              cpus: 0.10
              memory: 128M


  postgresql:
    container_name: postgresql
    image: 'bitnami/postgresql:14.8.0'
    environment:
      - POSTGRESQL_USERNAME=my_user
      - POSTGRESQL_PASSWORD=my_password
      - POSTGRESQL_DATABASE=hm
    ports:
      - "5440:5432"
    expose:
      - 5440
    volumes:
      - ./postgres_data:/var/lib/postgresql/data 
    networks:
      - backend
    deploy:
        resources:
            limits:
              cpus: 0.15
              memory: 128M
            reservations:
              cpus: 0.10
              memory: 64M

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
    
# First, define your user-defined bridge network:

# docker network create your-network-name
# Then, connect your containers to the network that you just created:

# docker network connect your-network-name container-name
# Then, you can inspect using the network interface that you create that container was successfully connected or not.

# docker inspect network-name

# The Overlay Driver
# The Overlay driver is for multi-host network communication, as with Docker Swarm or Kubernetes. It allows containers across the host to communicate with each other without worrying about the setup. Think of an overlay network as a distributed virtualized network thatâ€™s built on top of an existing computer network.

# To create an overlay network for Docker Swarm services, use the following command:

# docker network create -d overlay my-overlay-network
# To create an overlay network so that standalone containers can communicate with each other, use this command:

# docker network create -d overlay --attachable my-attachable-overlay
